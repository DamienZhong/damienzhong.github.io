<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【JavaSe必知必会】10-数据类型转换与运算]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9110-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[数据类型转换默认转换 +是一个运算符, 我们应该能够看懂，做数据的加法。 boolean类型不能转换为其他的数据类型 默认转换 byte,short,char—int—long—float—double byte,short,char相互之间补转换，他们参与运算首先转换为int类型 12345678910111213141516171819202122232425262728293031323334/* +是一个运算符(我们等会讲解)。做加法运算的。 一般来说，我们在运算的时候，要求参与运算的数据类型必须一致。 注意： boolean类型不能转换为其他的数据类型 默认转换(从小到大的转换) A:byte,short,char—int—long—float—double B:byte,short,char相互之间不转换，他们参与运算首先转换为int类型*/class DataTypeDemo3 &#123; public static void main(String[] args) &#123; //直接输出的方式做加法 //System.out.println(3 + 4); //两个int类型做加法 int x = 3; int y = 4; int z = x + y; System.out.println(z); //定义一个byte类型，一个int类型，做加法 byte a = 3; int b = 4; System.out.println(a + b); //可能损失精度 //byte c = a + b; int c = a + b; System.out.println(c); &#125;&#125; 不同数据类型变量参与运算图解 强制转换 目标类型 变量名=(目标类型)(被转换的数据); 1234567891011121314151617181920212223242526/* 强制转换： 从大的数据类型到小的数据类型。 格式： 目标数据类型 变量 = (目标数据类型) (被转换的数据); 注意： 不要随意的去使用强制转换，因为它隐含了精度损失问题。*/class DataTypeDemo4 &#123; public static void main(String[] args) &#123; byte a = 3; int b = 4; //这个肯定没有问题 //int c = a + b; //byte c = 7; //这个是有问题的 //byte c = a + b; //用强制类型转换改进 byte c = (byte) (a + b); System.out.println(c); &#125;&#125; 思考题1234567891011121314151617181920212223/* 思考题1：请问下面这个有没有问题 double d = 12.345; float f = d; 思考题2：看看下面两个定义有没有区别呢? float f1 = (float)12.345; float f2 = 12.345f; f1其实是通过一个double类型转换过来的。 而f2本身就是一个float类型。*/class DataTypeDemo5 &#123; public static void main(String[] args) &#123; //把double赋值给float，加了强制类型转换 double d = 12.345; float f = (float)d; //看看下面两个定义有没有区别呢? float f1 = (float)12.345; float f2 = 12.345F; &#125;&#125; 常量运算与变量运算的区别123456789101112131415161718192021/* 面试题： byte b1=3,b2=4,b; b=b1+b2; b=3+4; 哪句是编译失败的呢？为什么呢？ b = b1 + b2;是有问题的。 因为变量相加，会首先看类型问题，最终把结果赋值的也会考虑类型问题。 常量相加，首先做加法，然后看结果是否在赋值的数据类型范围内，如果不是，才报错。*/class DataTypeDemo6 &#123; public static void main(String[] args) &#123; //定义了三个byte类型的变量，b1，b2，b3 //b1的值是3，b2的值是4，b没有值 byte b1 = 3,b2 = 4,b; //b = b1 + b2; //这个是类型提升，所有有问题 b = 3 + 4; //常量，先把结果计算出来，然后看是否在byte的范围内，如果在就不报错。 &#125;&#125; 数据溢出原理解析1234567891011121314151617181920212223242526272829303132333435363738/* byte b = 130;有没有问题?如果我想让赋值正确，可以怎么做?结果是多少呢? 练习：byte b = (byte)300;*/class DataTypeDemo7 &#123; public static void main(String[] args) &#123; //因为byte的范围是：-128到127。 //而130不在此范围内，所以报错。 //byte b = 130; //我们可以使用强制类型转换 byte b = (byte) 130; //结果是多少呢? System.out.println(b); &#125;&#125;/* 分析过程： 我们要想知道结果是什么，就应该知道是如何进行计算的。 而我们又知道计算机中数据的运算都是补码进行的。 而要得到补码，首先要计算出数据的二进制。 A:获取130这个数据的二进制。 00000000 00000000 00000000 10000010 这是130的原码，也是反码，还是补码。 B:做截取操作，截成byte类型的了。 10000010 这个结果是补码。 C:已知补码求原码。 符号位 数值位 补码： 1 0000010 反码： 1 0000001 原码： 1 1111110*/ 常用字符与ASCII代码对照表 字符参与运算1234567891011121314151617/* 看程序写结果 通过字符和一个整数相加，我们给出一张表：ASCII码表。 通过看完这张表以后，我们要记住三个值： &apos;a&apos; 97 &apos;A&apos; 65 &apos;0&apos; 48*/class DataTypeDemo8 &#123; public static void main(String[] args) &#123; //直接输出一个字符 System.out.println(&apos;a&apos;); //a //输出一个字符和一个整数做加法 System.out.println(&apos;a&apos;+1); //98 &#125;&#125; 字符串参与运算1234567891011121314/* 看程序写结果 字符串数据和其他数据做+，结果是字符串类型。 这里的+不是加法运算，而是字符串连接符。*/class DataTypeDemo9 &#123; public static void main(String[] args) &#123; System.out.println(&quot;hello&quot;+&apos;a&apos;+1); //helloa1 System.out.println(&apos;a&apos;+1+&quot;hello&quot;); //98hello System.out.println(&quot;5+5=&quot;+5+5); //5+5=55 System.out.println(5+5+&quot;=5+5&quot;); //10=5+5 &#125;&#125;]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】09-Java数据类型划分]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9109-Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86%2F</url>
    <content type="text"><![CDATA[前言在经历了之前章节基础数学进制相关内容的洗礼之后，是不感觉自己的逻辑思维高了一大截？那本章我们要说的数据类型，肯定对大家来说就是小case了！那我们开始新章节的学习吧！ 变量变量概述 在程序执行的过程中，在某个范围内其值可以发生改变的量 理解：如同数学中的未知数 从本质上讲，变量其实是内存中的一小块区域，使用变量名来访问这块区域，因此，每一个变量使用前必须要先申请（声明），然后必须进行赋值（填充内容），才能使用。 为什么要定义变量呢用来不断的存放同一类型的常量，并可以重复使用 变量的组成规则： A：必须对其进行限定。如何限定？用数据类型。 B：我们在运算的时候，不可能拿着这个空间去运算，我们真正运算时使用的是该空间&gt;的值，我们就得给空间起一个名字：变量名 C：即使你有数据类型，你有变量名，但是如果没有值，这个空间就是一个垃圾空间，&gt;没有任何意义。所有需要初始化值。 定义变量的格式数据类型 变量名 = 初始化值; 注意：格式是固定的，记住格式，以不变应万变 数据类型 Java语言是强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存总分配了不同大小的内存空间 有效数字：具体地说，是指在分析工作中实际能够测量到的数字。所谓能够测量到的是包括最后一位估计的，不确定的数字。对于一个近似数，从左边第一个不是0的数字起，到精确到的位数止，所有的数字都叫做这个数的有效数字。 数据类型的概述和分类 定义不同数据类型的变量12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/* 数据类型：Java是一种强类型的语言，针对每一种数据都定义了明确的数据类型。 数据类型分类： A:基本数据类型 B:引用数据类型(类,接口,数值) 基本数据类型:4类8种 A:整数 占用字节数 byte 1 short 2 int 4 long 8 B:浮点数 float 4 double 8 C:字符 char 2 D:布尔 boolean 1 注意： 整数默认是int类型 浮点数默认是double类型。 长整型后缀用L或者l标记。建议使用L。 单精度浮点数用F或者f标记。建议使用F。*/class DataTypeDemo &#123; public static void main(String[] args) &#123; //定义变量的格式： //数据类型 变量名 = 初始化值; //定义一个字节变量 byte b = 10; System.out.println(10); System.out.println(b); //定义一个短整型变量 short s = 100; System.out.println(s); //定义一个整型变量 int i = 1000; System.out.println(i); //超过了int的范围 //int j = 1000000000000; long j = 1000000000000L; //long j = 100L; System.out.println(j); //定义浮点数据变量 float f = 12.345F; System.out.println(f); double d = 12.345; System.out.println(d); //定义字符变量 char ch = &apos;a&apos;; System.out.println(ch); //定义布尔变量 boolean flag = true; System.out.println(flag); &#125;&#125; 使用变量的注意事项作用域 变量定义在哪一级大括号中，哪个大括号的范围就是这个变量的作用域。相同的作用域中不能定义两个同名变量。 初始化值 没有初始化值不能直接使用 在一行上建议只定义一个变量 可以定义多个，但是不建议 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* 使用变量的时候要注意的问题： A:作用域 变量定义在哪个大括号内，它就在这个大括号内有效。 并且，在同一个大括号内不能同时定义同名的变量。 B:初始化值 没有初始化值的变量不能直接使用。 你只要在使用前给值就行，不一定非要在定义的时候立即给值。 推荐在定义的时候给值。 定义变量的格式： a:数据类型 变量名 = 初始化值; b:数据类型 变量名; 变量名 = 初始化值; C:在一行上建议只定义一个变量 可以定义多个，但是不建议*/class DataTypeDemo2 &#123; public static void main(String[] args) &#123; //定义变量 int x = 100; //错误，不能有同名的 //int x = 200; //定义变量必须给值 //int y; //System.out.println(y); int z; z = 100; System.out.println(z); //在一行上定义多个变量 //int a = 10; int b = 20; int c = 30; //上面的写法可以，但是不建议。 int a = 10; int b = 20; int c = 30; //int d, e; //d = 40; //e = 50; //int f,int g; //错误 //int h; int i; //正确 &#125;&#125;]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】08-原码反码补码]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9108-%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%2F</url>
    <content type="text"><![CDATA[前言通过上一章节的内容我们已经掌握了不同进制间的转化，但是我们可以发现，我们做的都是一些正数的转化，那在计算机中，负数如何表示与运算呢？这就不得不提一下我们计算机的“码三少“：原码反码补码了。 有符号数据表示法 在计算机内，有符号数有3种表示法：原码、反码和补码。所有数据的运算都是采用补码进行的。 原码就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。 反码正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。 补码正数的补码与其原码相同；负数的补码是在其反码的末位加1。 1234567891011121314151617181920212223242526272829303132有符号数据表示法 在技术算计内，有符号数据有3种表示法：原码、反码、补码。 原码 就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。 反码 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。 补码 正数的补码与其原码相同；负数的补码是在其反码的末位加1。 我准备用原码、反码、补码分别来表示+7，-7. 首先我们要得到7的二进制：111 原码： 正数的原码最高位是0. 负数的原码最高位为1. 其他的数值位. 符号位 数值位 +7 0 0000111 -7 1 0000111 反码： 正数的反码与其原码相同。 负数的反码与原码符号位相同，数值位要取反，就是0变1，1变0. 符号位 数值位 +7 0 0000111 -7 1 1111000 补码： 正数的补码与原码相同。 负数的补码是在反码的基础上加1. 符号位 数值位 +7 0 0000111 -7 1 1111001]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】07-进制的转换]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9107-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[前言在上一节的文章中我们讲解了进制的概述与不同进制的表现形式，我猜肯定还有很多人懵懵懂懂的。老铁，莫慌，这是正常现象，接着往下看，你会发现，进制这小子算个啥子咧！ 其他进制到十进制通过十进制推出结论1234567891011121314其他进制到十进制的转换 十进制 十进制 12345 = 10000 + 2000 + 300 + 40 + 5 = 1*10^4 + 2*10^3 + 3*10^2 + 4*10^1 +5*10^0 = 10000 + 2000 + 300 + 40 + 5 = 12345 系数：每一个位上的数据值本身就是系数 基数：x进制的基数就是x 权：我们针对每一个位上的数据进行编号，从右边，并且是从0开始编号， 这个编号就是该位上的数据的权值 每一个位上的系数*基数^权次幂相加 把0b100,0100,0x100转换成十进制1234567891011121314二进制：100 十进制：4100 =1*2^2 + 0*2^1 + 0*2^0 =4 + 0 + 0 =4八进制：100 十进制：64100 =1*8^2 + 0*8^1 + 0*8^0 =64 + 0 + 0 =64 十六进制：100 十进制：256100 =1*16^2 + 0*16^1 + 0*16^0 =256 + 0 + 0 =256 十进制到其他进制通过十进制推出结论12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849十进制转其他进制 除基取余，直到商为0，余数反转 十进制 十进制 12345 12345 商 余数 12345 ————— = 1234 % 5 10 1234 ————— = 123 % 4 10 123 ————— = 12 % 3 10 12 ————— = 1 % 2 10 1 ————— = 0 % 1 10 十进制：20 二进制：10100 20 ——— = 10 % 0 2 10 ——— = 5 % 0 2 5 ——— = 2 % 1 2 2 ——— = 1 % 0 2 1 ——— = 0 % 1 2 结论：==除基取余，直到商为0，余数反转==。 十进制和二进制的快速转换8421码 8421码是中国大陆的叫法，8421码是BCD代码中最常用的一种。在这种编码方式中每一位二进制代码的1都是代表一个固定数值，把每一位的1代表的十进制数加起来，得到的结果就是它所代表的十进制数码。 123456789101112二进制 1 1 1 1 1 1 1 1十进制 128 64 32 16 8 4 2 1二进制到十进制的转换： 1010100 = 64 + 16 + 4 = 84 十进制到二进制的转换： 100 = 0b1100100 问题：任意的x进制到y进制的转换，如何转？ x进制 ---&gt; 十进制 十进制 ---&gt; y进制 二进制和八进制，十六进制如何转换 以十进制作为桥梁 二进制到八进制 3位组合 二进制到十六进制 4位组合 12345678910111213141516二进制到八进制，十六进制 A:二进制到十进制，十进制到八进制或十六进制 B：拆分组合法0b1011001 八进制方式1： 0b1011001 = 64+16+8+1 =89 89 = 0131 89/8=11 1 11/8=1 3 1/8=0 1方式2： 0b1011001 001 011 001 1 3 1 0131]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】06-Java常量与进制概述]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9106-Java%E5%B8%B8%E9%87%8F%E4%B8%8E%E8%BF%9B%E5%88%B6%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[前言上一节我们介绍了注释、关键字与标识符，本章给大家介绍一下常量，准备好没有，要开车了！ 常量常量概述 在程序执行的过程中其值不可以发生改变 Java中常量分类 字面值常量 自定义常量(面向对象部分讲) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/* 常量： 在程序执行过程中，其值不发生改变的量。 分类： A:字面值常量 B:自定义常量(后面讲) 字面值常量 A:字符串常量 用双引号括起来的内容。 举例：&quot;hello&quot;,&quot;world&quot;,&quot;HelloWorld&quot; B:整数常量 所有的整数 举例：100,200 C:小数常量 所有的小数 举例：10.23,110.11 D:字符常量 用单引号括起来的内容 举例：&apos;a&apos;,&apos;A&apos;,&apos;0&apos; 错误的：&apos;ab&apos; E:布尔常量 比较特殊 举例：true,false F:空常量 后面讲 举例：null*/class ConstantDemo &#123; public static void main(String[] args) &#123; //字符串常量的输出 System.out.println(&quot;hello&quot;); //整数常量的输出 System.out.println(100); //小数常量的输出 System.out.println(100.10); //字符常量的输出 System.out.println(&apos;a&apos;); System.out.println(&apos;A&apos;); System.out.println(&apos;0&apos;); //这个是有问题的 //System.out.println(&apos;ab&apos;); //布尔常量的输出 System.out.println(true); System.out.println(false); &#125;&#125; 进制进制概述与图解概述Java针对整数常量提供了4种表现形式 二进制 八进制 十进制 十六进制 进制：就是进位制，是人们规定的一种进位方法。对于任何一种进制–X进制，就表示某一位置上的数运算时是逢X进一位。二进制就是逢二进一，八进制是逢八进一，十进制是逢十进一，十六进制是逢十六进一。 二进制的由来：任何数据在计算机中都是以二进制的形式存在的。二进制早期由电信号开关演变而来。一个整数在内存中一样也是二进制的，但是使用一大串的1或者0组成的数值进行使用很麻烦。所以就想把一大串缩短点，将二进制中的三位用一位表示。这三位可以取到的最大值就是7.超过7就进位了，这就是八进制。但是对于过长的二进制变成八进制还是较长，所以出现的用4个二进制位表示一位的情况，四个二进制位最大是15，这就是十六进制。==规律，进制越大，表现形式越短。== 图解 不同进制数据的表现形式不同进制的数据组成 二进制 由0,1组成。以0b开头 八进制 由0,1,…7组成。以0开头 十进制 由0,1,…9组成。整数默认是十进制的 十六进制 由0,1,…9,a,b,c,d,e,f(大小写均可)。以0x开头代码演示 12345678910111213141516/* 不同进制的数据表现： 二进制：由0，1组成。以0b开头。 八进制：由0,1,...7组成。以0开头。 十进制：由0,1,...9组成。默认整数是十进制。 十六进制：由0,1,...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。*/class JinZhiDemo &#123; public static void main(String[] args) &#123; System.out.println(100); //十进制 System.out.println(0b100); //二进制 System.out.println(0100); //八进制 System.out.println(0x100); //十六进制 &#125;&#125;]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】05-Java程序基本概念]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9105-Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[前言在前面的内容中，我们介绍了Java的环境搭建，也敲了我们学习过程中的第一个Java程序，但是，我想很多人暂时还对之前敲的那段代码心存疑问。没有关系，接下来，我们就对其进行抽丝剥茧，深入解析，你会发现，原来Java如此简单。 注释注释概述及其分类 注释概述 用于解释说明程序的文字 Java中注释分类格式 单行注释 格式： //注释文字 多行注释 格式： / 注释文字 / 文档注释 格式：/* 注释文字 /注释用途 注释是一个程序员必须要具有的良好编程习惯。 ==初学者编写程序可以养成习惯：先写注释再写代码==。 将自己的思想通过注释先整理出来，在用代码去体现。 因为代码仅仅是思想的一种体现形式而已。注释代码整合案例演示 12345678910111213141516/***我们要写一个输出呆萌钟很帅的程序*//*分析思路： 1、首先要定义一个类：ZhushiDemo 2、程序要被jvm调用，需要定义main方法 3、程序要想输出结果，必须要有输出语句*/public class ZhushiDemo&#123;//定义一个类，public与class都是定义类用的关键字，后面跟的是类名 //定义main方法 public static void main(String[] args)&#123; //输出语句基本格式，双引号里面的内容就是你们想要输出的内容 System.out.println(&quot;呆萌钟很帅&quot;); System.out.println(&quot;我们也很帅&quot;); &#125;&#125; 注释总结 解释说明程序，提高程序的阅读性可以帮助我们排错 后面我们会讲解更高级的排错方式标识符与关键字关键字 关键字概述 被Java语言赋予特定含义的单词 关键字特点 组成关键字的字母全部小写 关键字注意事项 goto和const作为保留字存在,目前并不使用 类似Notepad++这样的高级记事本,针对关键字有特殊的颜色标记，非常直观Java中的关键字列表标识符 标识符概述 就是给类,接口,方法,变量等起名字时使用的字符序列 组成规则 英文大小写字母 数字字符 $和_ 注意事项 不能以数字开头 不能是Java中的关键字 区分大小写标识符命名示例 包(其实就是文件夹,用于解决相同类名问题) 字母全小写,demo.biaoshifu、demo.guanjianzi 类或者接口 单个单词：首字母大写，Name 两个或多个单词：每个单词首字母大写，ClassName、InterfaceName 方法和变量 单个单词：首字母大写，Name 两个或多个单词：每个单词首字母大写，ClassName、InterfaceName 常量一个单词和和多个单词分别举例 单个单词：所有字母大写 多个单词：所有字母大写，单词与单词之间用下划线分割]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】04-编写第一个Java程序]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9104-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[前言现在，大家应该都已经安装好jdk环境和环境变量配置好了吧！是不是已经跃跃欲试，按耐不住心中的小激动了？那我们现在就来写我们java学习生涯中的第一个java程序。 文件相关设置为了方便后面大家的学习呢？有一点大家还是需要提前设置一下的，就是文件的相关设置（如果已经做过相关设置，跳过这一段）首先随便进入一个文件夹，我们会发现文件夹下的文件都只有文件名，却没有文件是属于那种类型的后缀名，设置成功之后应该是长这样的，先给大家看设置成功的样子 如果你的已经是长这样了，那就不用设置啦，说明已经设置过了，如果不是长上面那样的同学，那你们就需要再往下看咯！ 首先我们看一下文件夹上方的工具栏，是不是有一个工具选项，点击它，然后选择文件夹选项 选择查看，然后把显示隐藏的文件选择上，把隐藏已知文件的扩展名这个√去掉，搞定之后点击确定就大功告成了！ 文本编辑器编写代码可能很多朋友在看别的程序员敲代码的时候都是用各种炫酷的集成IDE开发工具，好黑科技的感觉对不对？不用羡慕他们，后面我们也会变得炫酷。那如何才能以后变得炫酷呢？骚年，莫急，现在我们就要介绍炫酷coding的开山鼻祖——文本编辑器直接直接写代码。 啥是文本编辑器？(⊙o⊙)…额，应该都知道吧。那我们就直接说咯！ 首先自己选择一个文件夹，最好新建一个专门用于存储我们自己写的代码的文件夹，进入文件夹之后点击鼠标右键，选择新建，然后选择文本文档 把文件名重命名为HelloJava，把txt后缀名改为java，命名完成出现下图提示点击是 创建完成之后，我们会发现文件的类型变为Java类型，我们选中该文件，点击鼠标右键，选择编辑，打开文本编辑框后输入如下内容 编辑完成后关闭文件回到该文件所在目录（即文件夹），然后在当前目录打开命令行DOS窗口，输入命令javac HelloJava.java,然后回车，发现命令行DOS窗口没啥反应，但是如果你仔细一点，你会发现，当前目录下多了一个叫做HelloJava.class的文件，如下图 好，我先不解释它是啥，因为后续会说到，如果出现这一步，我们继续在DOS窗口输入下一条命令：java HelloJava，回车，是不是发现此时窗口里有反应了，多出了两行文字 这两行内容其实就是我们刚才在文本编辑器中的代码让其打出的，这就是用文本编辑器的方式编写运行代码的方式！ Java9的JShell方式编写代码什么是jshell呢？那我就简单的先给大家介绍一下。 jshell是Java 9 新增的一个脚本工具，意思是可以在命令行里直接运行java的代码，而无需创建Java文件，然后再编译，最后运行。我觉得jshell的好处就是即写即得，平常只想看看几行代码运行的结果是怎么样的，有了jshell就方便多了，直接在命令行上敲。 那如何使用它呢？ 打开DOS命令窗口，输入命令：jshell，回车，稍等几秒钟就会看到JShell启动成功的欢迎提示语，出现下图说明启动成功！ 然后，怎么用呢？比如，输入 1+1: 结果输出$1 ==&gt; 2，其中$1表示第一个临时变量。 如果输出我们刚才用文本编辑器输出的内容呢？ 我们再用它创建一个方法，方法具体是什么我们后面再详细说，现在先简单的看效果 如果想修改方法，怎么办？重写吗？不用这样的亲，可以输入“/edit sum”，会弹出编辑界面： 调用修改过的方法，这里的j是我们定义的变量，所以它没有”$”符号。 如果我们想看看之前自己所运行的所有脚本，我们可以用“/list”来查看 然后，我们可以通过“/import”来查看脚本的默认导入的包，至于什么是包，就是当前程序运行需要引用的一些东西 最后，我们输入“/exit”来退出jshell环境： 结语好啦，两种方式都介绍完了，赶紧去尝试一下吧！]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】03-Java开发环境配置]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9103-Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言在上一篇文章对Java做了一个简单介绍之后，我想大家都已经对她有一个初步的认识了吧！那踏入正式学习使用Java之前，我们有一步是不得不做的，它是什么呢？没有错，就是我们本篇文章的标题所说，搭建Java的开发环境配置。那我们就正式进入主题吧！ JDK的下载与安装JDK下载 通过官方网站获取JDKhttp://www.oracle.com 针对不同操作系统，下载不同的JDK版本识别计算机的操作系统下载图解 浏览器访问==Oracle==官网：http://www.oracle.com 标注1：浏览器输入==Oracle==官网地址（回车） 标注2：点击==Java==选项 标注3：选择==Java SE==选项（等待跳转新页面） 找到Java开发平台，访问链接 标注1：选择==Technologies==（技术）选项 标注2：选择==Java SE==选项 标注3：点击==Java Platform, Standard Edition==链接 选择自己想要的JDK版本，进入下载页面 标注1：选择==Download==选项 标注2：点击==JDK==下的==DOWNLOAD==按钮（选择自己想要下载的JDK版本） 选择想要下载的版本号进行下载（这里选择==Jdk8==的==8u162==） 标注1：选择接受版本协议（必选） 标注2：根据自己的==操作系统位数==选择对应版本进行下载Windows操作系统位数查看 回到桌面，找到==我的电脑==–&gt;==鼠标右键==–&gt;==属性== 标注1：操作系统位数（图片显示的是64位操作系统） JDK安装 找到之前下载的JDK安装文件 标注1：该文件即为java安装可执行文件 双击该文件执行安装，弹出如下图： 标注1：点击下一步 定制安装弹窗： 标注1：选择==开发工具== 标注2：更改到自己想要存放的文件目录 标注3：点击下一步 等待进度条加载完成（此过程中不要进行任何操作） 安装==Jre== 标注1：把Jre的安装目录更改成和之前Jdk的同级目录 标注2：点击下一步 等待安装进度条执行完 弹出安装成功窗口 标注1：直接点击关闭即可验证安装结果 标注1：DOS窗口命令行输入：==java==，回车，展示如上图片内容则安装成功JDK目录介绍 bin：JDK的各种工具命令即JDK开发工具的可执行文件其中这些可执行文件都是二进制的 db：jdk自带数据库 include：一些供C语言使用的标题文件 jre：运行Java程序所必须的JRE环境 lib：支持Java运行的核心类库 src：Java所有核心类库的源代码环境变量配置 环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。 环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程。 找到我的电脑，点击鼠标右键，选择属性，弹出如下窗口 标注1：点击==高级系统设置== 点击环境变量按钮 标注1：环境变量按钮 点击==环境变量==下的==新建按钮== 新建==JAVA_HOME==变量 标注1：变量名为“JAVA_HOME”(复制我引号内的内容就可以了，不含引号） 标注2：变量值，必须是自己装jdk时的路径 标注3：设置完成点击确定按钮 找到“CLASSPATH”,没有的话就“新建” 标注1：变量名为“==CLASSPATH==”(复制我引号内的内容就可以了，不含引号） 标注2：变量值“==.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;==”(不含引号） 标注3：设置完成点击确定按钮 找到Path，对其进行编辑 标注1：==%JAVA_HOME%\bin== 标注2：==%JAVA_HOME%\jre\bin== 标注3：设置完成点击确定按钮，把之前窗口的所有确定按钮都点击验证方式 任意窗口下打开Dos窗口，输入命令==javac==，看是否输出如下图所示内容，有则配置成功]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】02-Java语言概述]]></title>
    <url>%2F2018%2F11%2F15%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9102-Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[前言在看完了上一篇文章的计算机基础的文章后，我想大家应该对常用的计算机基础知识有一定的了解了吧！那我们就正式开始Java语言的学习之旅吧！ Java语言发展历史Java语言之父Java之父——詹姆斯·高斯林出生于加拿大，是一位计算机编程天才。在卡内基·梅隆大学攻读计算机博士学位时，他编写了多处理器版本的Unix操作系统，是JAVA编程语言的创始人。 名号由来1991年，在Sun公司工作期间，高斯林和一群技术人员创建了一个名为Oak的项目，旨在开发运行于虚拟机的编程语言，同时允许程序在电视机机顶盒等多平台上运行。后来，这项工作就演变为Java。随着互联网的普及，尤其是网景开发的网页浏览器的面世，Java成为全球流行的开发语言。++因此被人称作Java之父。++ 职业生涯 1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视，后来转至Sun公司。 1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。 在2010年甲骨文收购Sun后不久，这位Java编程语言的发明者宣布离职，并在2011年初加入谷歌。 2011年8月30日，高斯林在其博客上宣布离开谷歌，加入开展海洋探测业务的机器人制造公司Liquid Robotics，任首席软件架构师。负责传感器软件开发和自主导航设计，数据中心海量数据处理。 Java发展历史 1995年5月23日，Java语言诞生 1996年1月，第一个JDK-JDK1.0诞生 1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入JAVA技术 1996年9月，约8.3万个网页应用了JAVA技术来制作 1997年2月18日，JDK1.1发布 1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同类会议规模之纪录 1997年9月，JavaDeveloperConnection社区成员超过十万 1998年2月，JDK1.1被下载超过2,000,000次 1998年12月8日，JAVA2企业平台J2EE发布 1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE,以前是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前是J2ME） 2000年5月8日，JDK1.3发布 2000年5月29日，JDK1.4发布 2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机 2001年9月24日，J2EE1.3发布 2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升 2004年9月30日18:00PM，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名，以取消其中的数字”2”：J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME 2006年12月，SUN公司发布JRE6.0 2009年04月20日，甲骨文74亿美元收购Sun。取得java的版权。 2010年11月，由于甲骨文对于Java社区的不友善，因此Apache扬言将退出JCP[4]。 2011年7月28日，甲骨文发布java7.0的正式版。 2014年3月18日，Oracle公司发表Java SE 8。 2017年9月22日，Oracle公司发表Java SE 1.9。Java语言平台版本 J2SE(Java 2 Platform Standard Edition)标准版 是为开发普通桌面和商务应用程序提供的解决方案 该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发 J2ME(Java 2 Platform Micro Edition)小型版 是为开发电子消费产品和嵌入式设备提供的解决方案 J2EE(Java 2 Platform Enterprise Edition)企业版 是为开发企业环境下的应用程序提供的一套解决方案 该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE, J2SE更名为Java SE，J2ME更名为Java ME。 Java语言特点 简单性 解释性 面向对象 高性能 分布式处理 多线程 健壮性 动态 结构中立 安全性 ==开源== ==跨平台==跨平台性 什么是跨平台性？ 通过Java语言编写的应用程序在不同的系统平台上都可以运行。 原理是什么？ 只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机(JVM Java Virtual Machine)即可。由JVM来负责Java程序在该系统中的运行。 ==++Java语言是跨平台的，而JVM不是跨平台的++。== JRE与JDKJRE（Java Runtime Environment）JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。 JDK（Java Development Kit ）JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo。 为什么JDK中包含一个JRE呢？ 其一，开发完的程序，总需要运行一下看看效果。 其二，也是最重要的，JDK中的开发工具其实都是java语言编写的应用程序，为了方便使用才打包成exe文件，如果没有JRE，那么这些工具是运行不了的。 选择Java的原因持续的超高热度 上图是来自权威的TIOBE排行榜 可以看出，Java有着超高的热度，这意味着Java前景好、就业面广。 使用广泛java拥有庞大的用户，活跃的社区，语言稳定，能让你在遇到问题的时候快速找到解决方案。Java有很多企业在用，而且都是用在大项目上，这意味着java有良好的就业环境。 简单易学首先Java是一个面向对象的编程语言，容易理解。而且略去了多重加载、指针等难以理解的概念。并且实现了自动垃圾回收，大大简化了程序设计。而且网上关于java的学习资源太多太多了，如雨后春笋般冒出来的java培训机构也太多太多了，这都给我们提供了一个很好的学习环境与氛围。 丰富的类库Java从出道至今已有10多年的历史，经过10多年的积累和沉淀，出现了很多优秀的开源社区，如Apache和Spring。这些优秀的社区提供了很多非常好的框架，借助这些框架可以使我们不用去关注Java底层的开发，而只需关注业务的实现。 多样的职业发展路径 其实图片中包括的并不是特别准确，当下行情比上述描述的还要好，薪资其实比上面要更高，职业发展路径选择的方式也大于上图所示。但前提是，学好的情况下！ 结语听我说了这么多，是不是已经迫不及待的想要投入Java的怀抱了？还等什么，快上车，不然来不及了！]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【JavaSe必知必会】01.计算机基础]]></title>
    <url>%2F2018%2F11%2F14%2F%E3%80%90JavaSe%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%9101-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[前言我想，来到这的朋友肯定是想学习JAVA或者想要进入IT这个行业的。考虑到大家的基础可能不一样，有些人可能还是用着新买的电脑，为了让大家在后续的学习中更加顺畅。在学习一门全新的计算机语言之前，我需要先给大家普及了解一些计算机基础知识。 计算机基础知识计算机 计算机（Computer）全称：电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成，没有安装任何软件的计算机称为裸机。常见的形式有台式计算机、笔记本计算机、大型计算机等。 计算机的应用已渗透到社会的各个领域，正在改变着人们的工作、学习和生活的方式，推动着社会的发展。哪些方面?归纳一下，计算机的应用主要在以下几个方面： 1：科学计算 科学计算也称数值计算。计算机最开始是为解决科学研究和工程设计中遇到的大量数学问题的数值计算而研制的计算工具。例如，人造卫星轨迹的计算，房屋抗震强度的计算，火箭、宇宙飞船的研究设计都离不开计算机的精确计算。就连我们每天收听收看的天气预报都离不开计算机的科学计算。 2、数据处理 在科学研究和工程技术中，会得到大量的原始数据，其中包括大量图片、文字、声音等信息处理就是对数据进行收集、分类、排序、存储、计算、传输、制表等操作。 3、自动控制 自动控制是指通过计算机对某一过程进行自动操作，它不需人工干预，能按人预定的目标和预定的状态进行过程控制。例如，无人驾驶飞机、导弹、人造卫星和宇宙飞船等飞行器的控制，都是靠计算机实现的。 4、计算机辅助设计计算机辅助设计(Computer Aided Design，简称CAD)是指。借助计算机的帮助，人们可以自动或半自动地完成各类工程设计工作。目前CAD技术已应用于飞机设计、船舶设计、建筑设计、机械设计、大规模集成电路设计等。在京九铁路的勘测设计中，使用计算机辅助设计系统绘制一张图纸仅需几个小时，而过去人工完成同样工作则要一周甚至更长时间。可见采用计算机辅助设计，可缩短设计时间，提高工作效率，节省人力、物力和财力，更重要的是提高了设计质量。 5、人工智能 人工智能(Artificial Intelligence，简称AI)是指计算机模拟人类某些智力行为的理论、技术和应用。例如，用计算机模拟人脑的部分功能进行思维学习、推理、联想和决策，使计算机具有一定“思维能力”。我国已开发成功一些中医专家诊断系统，可以模拟名医给患者诊病开方。 还有就是机器人也是计算机人工智能的典型例子。 6、多媒体应用 随着电子技术特别是通信和计算机技术的发展，人们已经有能力把文本、音频、视频、动画、图形和图像等各种媒体综合起来，构成一种全新的概念—“多媒体”(Multimedia)。比如一些flash广告，网页游戏等。 7、计算机网络 计算机网络是由一些独立的和具备信息交换能力的计算机互联构成，以实现资源共享的系统。如在全国范围内的银行信用卡的使用，火车和飞机票系统的使用等。 计算机硬件计算机硬件（Computer Hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。计算机通常由CPU、主板、内存、电源、主机箱、硬盘、显卡、键盘、鼠标，显示器等多个部件组成。 计算机软件计算机软件是使用计算机过程中必不可少的东西，计算机软件可以使计算机按照事先预定好的顺序完成特定的功能，计算机软件按照其功能划分为系统软件与应用软件 系统软件： DOS(Disk Operating System), Windows, Linux, Unix, Mac, Android, iOS 应用软件：office QQ聊天 YY语言 扫雷 软件开发 软件按照特定顺序组织的计算机数据和指令的集合 开发软件的制作过程 软件开发借助开发工具与计算机语言制作软件 计算机语言 语言 人类进行沟通交流的各种表达符号，方便人与人之间进行沟通与信息交换 计算机语言 人与计算机之间进行信息交流沟通的一种特殊语言计算机语言中也有字符，符号等等常见的计算机语言如C,C++,C#,JAVA 人机交互方式 软件的出现实现了人与计算机之间更好的交互。 交互方式 图形化界面：这种方式简单直观，使用者易于接受，容易上手操作。 命令行方式：需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。 键盘功能键及快捷键介绍键盘功能键介绍 Tab Shift Ctrl Alt 空格 Enter Window 上下左右 PrtSc(PrintScreen)屏幕截图 快捷键介绍 Ctrl+A 全选 Ctrl+C 复制 Ctrl+V 粘贴 Ctrl+X 剪切 Ctrl+Z 撤销 Ctrl+S 保存 常用的DOS命令打开DOS控制台的方式 开始–程序–附件–命令提示符 开始–运行—cmd—回车 win+r—cmd–回车 扩充内容：目录中的exe文件可以直接使用其名称执行该命令调整DOS界面显示内容数量 常用DOS命令 d: 回车 盘符切换 dir(directory):列出当前目录下的文件以及文件夹 md (make directory) : 创建目录 rd (remove directory): 删除目录 cd (change directory)改变指定目录(进入指定目录) cd.. : 退回到上一级目录 cd\: 退回到根目录 del (delete): 删除文件,删除一堆后缀名一样的文件*.txt exit : 退出dos命令行 cls : (clear screen)清屏]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
</search>
